@model RSM.BOL.Models.Owner

@{
    ViewBag.Title = "AddOwner";
    Layout = "~/Views/Shared/_Layout.cshtml";
}



@using (Html.BeginForm()) 
{
    @Html.AntiForgeryToken()
    
<div class="form-horizontal">
    <h4>Owner</h4>
    <hr />

    @*@Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.FirstName, htmlAttributes: new { @class = "control-label col-md-3 col-sm-3 col-xs-12" })
            <div class="col-md-6 col-sm-6 col-xs-12">
                @Html.EditorFor(model => model.FirstName, new { htmlAttributes = new { @class = "form-control col-md-7 col-xs-12", @id = "first-name" } })
                <small id="first-name-error" class="text-danger"></small>
                @Html.ValidationMessageFor(model => model.FirstName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.LastName, htmlAttributes: new { @class = "control-label col-md-3 col-sm-3 col-xs-12" })
            <div class="col-md-6 col-sm-6 col-xs-12">
                @Html.EditorFor(model => model.LastName, new { htmlAttributes = new { @class = "form-control col-md-7 col-xs-12", @id = "last-name" } })
                <small id="last-name-error" class="text-danger"></small>
                @Html.ValidationMessageFor(model => model.LastName, "", new { @class = "text-danger" })
            </div>
        </div>*@


    @*recent*@

    <div class="form-group">
        <label class="control-label col-md-3 col-sm-3 col-xs-12">Owner Type</label>
        <div class="col-md-9 col-sm-9 col-xs-12">
            <select class="form-control">
                <option>Choose option</option>
                <option>Inverster</option>
                <option>Buyer</option>
            </select>
        </div>
    </div>

    <div class="row">
        <div class="col-md-6 col-sm-12">
            <div class="form-group">
                @Html.LabelFor(model => model.FirstName, htmlAttributes: new { @class = "control-label col-md-3 col-sm-3 col-xs-12" })
                <div class="col-md-9 col-sm-9 col-xs-12">
                    @Html.EditorFor(model => model.FirstName, new { htmlAttributes = new { @class = "form-control col-md-7 col-xs-12", @id = "first-name" } })
                    <small id="first-name-error" class="text-danger"></small>
                    @Html.ValidationMessageFor(model => model.FirstName, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="col-md-6 col-sm-12">
            <div class="form-group">
                @Html.LabelFor(model => model.LastName, htmlAttributes: new { @class = "control-label col-md-3 col-sm-3 col-xs-12" })
                <div class="col-md-9 col-sm-9 col-xs-12">
                    @Html.EditorFor(model => model.LastName, new { htmlAttributes = new { @class = "form-control col-md-7 col-xs-12", @id = "last-name" } })
                    <small id="last-name-error" class="text-danger"></small>
                    @Html.ValidationMessageFor(model => model.LastName, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>
    </div>


    <div class="form-group">
        @Html.LabelFor(model => model.CNIC, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.CNIC, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.CNIC, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.CellNo, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.CellNo, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.CellNo, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Gender, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Gender, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Gender, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.ContactNo, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.ContactNo, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.ContactNo, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Address, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Address, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Address, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.ImagePath, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.ImagePath, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.ImagePath, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.SODOWO, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.SODOWO, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.SODOWO, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.DOB, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.DOB, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.DOB, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.OwnerType, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.OwnerType, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.OwnerType, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        <div class="col-md-offset-2 col-md-10">
            <input type="submit" value="Create" class="btn btn-default" />
        </div>
    </div>
</div>
    }

    <div>
        @Html.ActionLink("Back to List", "Index")
    </div>

    @section Scripts {
        @Scripts.Render("~/bundles/jqueryval")
    }

<script>

    //var errorElement = document.getElementById('first-name-error');
    //document.getElementById('first-name').addEventListener('input', errorElement, function () {
    //    event.preventDefault();
    //    validateFirstName(this, errorElement);
    //});

    //var errorElementLast = document.getElementById('last-name-error');
    //document.getElementById('last-name').addEventListener('input', errorElementLast, function () {
    //    event.preventDefault();
    //    validateFirstName(this, errorElementLast);
    //});



    //function validateFirstName(input, errorElement) {
    //    //const errorElement = document.getElementById(errorMessage);
    //    const value = input.value.trim();

    //    // Check if input is empty
    //    if (value === '') {
    //        errorElement.textContent = "First Name cannot be empty.";
    //        input.classList.add('is-invalid');
    //    }
    //    // Check if it contains numbers
    //    else if (/\d/.test(value)) {
    //        errorElement.textContent = "First Name cannot contain numbers.";
    //        input.classList.add('is-invalid');
    //    }
    //    // Check if length is less than 3
    //    else if (value.length < 3) {
    //        errorElement.textContent = "First Name must be at least 3 characters long.";
    //        input.classList.add('is-invalid');
    //    }
    //    // Check if length is greater than 50
    //    else if (value.length > 50) {
    //        errorElement.textContent = "First Name must be less than 50 characters.";
    //        input.classList.add('is-invalid');
    //    } else {
    //        errorElement.textContent = "";  // Clear the error message
    //        input.classList.remove('is-invalid');
    //        input.classList.add('is-valid');
    //    }
    //}

    //var isValid = true;

    var firstName = document.getElementById('first-name');
    firstName.addEventListener('input', function () {
        event.preventDefault();
        Block(firstName, true,true);
    });

    function Block(elem, isCheckEmpty = false, isCheckPattern = false) {
        //var nameError = elem.dataset.valRequired;
        var nameError = "Anna";
        let pattern = /^[a-zA-Z0-9]+$/;
        if (elem.value == "" && isCheckEmpty == true) {
            elem.parentElement.getElementsByTagName("span")[0].innerHTML = nameError;
            //isValid = isValid && false;
        }
        else if (elem.value.trim() != "" && pattern.test(elem.value.trim())) {
            elem.parentElement.getElementsByTagName("span")[0].innerHTML = "PatternFalse"
            //isValid = isValid && true;
        }
        else {
            elem.parentElement.getElementsByTagName("span")[0].innerHTML = "Enter Your Correct Name";
            //isValid = isValid && false;
        }
        //return isValid;
    }
</script>
